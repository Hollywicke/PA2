module src;
import java.io.*;
import java.util.*;


/*

  A server designed to store and retrieve files.

  You may adjust function signatures to your needs, 
  and are encouraged to add helper functions.

*/
behavior FileServer {


    int blockSize = 64;
    DirectoryServer dirServ;
    Vector v;

    FileServer() { 
            dirServ = new DirectoryServer(); 
            v = new Vector();
    }
    FileServer(UAN serv) { 
            dirServ = (DirectoryServer) DirectoryServer.getReferenceByName(serv); 
            dirServ <- addFileServer(self): priority;
            v = new Vector();
    }
    
    /* Save some data to file
     *
     * Each file server will have its own
     * directory.
     */
    /* You may pass and return any data you need. */
    void store(String fileName, String contents) {
        /*When being assigned a file part from the Directory Service, it stores the file part within its own file system*/
        FileUtility.mkdir(fileName);
        String s = self.getUAN().toString();
        FileUtility.save("servers/" + s.substring(s.lastIndexOf("/")+1) + "/" + fileName, contents);
        v.add(fileName);
    }

    boolean contains(String fileName){
        return v.contains(fileName);
    }

    /* Retrieve some file block, possibly with order information */
    /* You may pass and return any data you need. */
    String retrieve(String fileName) {
    /* When a client requests a file, it returns the contents of that file along with what part of the file it is.*/
        return FileUtility.load(fileName);

        // @currentContinuation;
    }
}