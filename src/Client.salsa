module src;
import java.util.*;
import src.FileUtility;


/*

  A client that creates and interacts with directory
  and file servers.  Loads instructions from a .script file.

  You may adjust function signatures to your needs, 
  and are encouraged to add helper functions.

*/
behavior Client {


    int blockSize = 64;
    FileUtility inputScript;
    DirectoryServer ds;

    void downloadFile(Hashtable ht, String fileName){
        Set keys = ht.keySet();
        Set values = ht.values();
        String curKey = "";
        String curValue = "";
        while(keys.hasNext()){
            curKey = keys.next();
            curValue = values.next();
            FileUtility.load(curkey);
        }
    }

    void lineHandler(String s){
        String[] split = s.split(" ",s.length());
        if(s.charAt(0) == 'd') {
            standardOutput <- println("Create Directory Server Actor");
            ds = new DirectoryServer() at (new UAN (split[1]), new UAL (split[2]));
        }
        else if(s.charAt(0) == 'f') {
            standardOutput <- println("Create File Server Actor");
            FileServer fs = new FileServer(ds.getUAN()) at (new UAN (split[2]), new UAL (split[3]));
            FileUtility.mkdir("servers/" + split[2].substring(split[2].lastIndexOf("/")+1));
            ds <- addFileServer(fs);
        }
        else if(s.charAt(0) == 'c') {
            standardOutput <- println("Send file to Directory to send to File Servers");
            ds = (DirectoryServer) DirectoryServer.getReferenceByName(new UAN (split[1]));
            ds <- store(split[2].substring(0,split[2].lastIndexOf(".")),FileUtility.load("input/" + split[2]));
        }
        else if(s.charAt(0) == 'g') {
            standardOutput <- println("Get File from Directory Server");
            DirectoryServer ds = (DirectoryServer) DirectoryServer.getReferenceByName(new UAN (split[1]));
            ds <- retrieve(split[2]);
        }
        else if(s.charAt(0) == 'q') {
            standardOutput <- println("Send quit to Directory Server to send to File Servers");
        }
        return;
    }


    /* Your program's first input must be the path to the 
     * input file it will execute (e.g. input/simple.script).
     * Additional arguments will not be passed for tests.
     */
    void act( String[] args ) {
        if (args.length != 1) {
            standardOutput<-println( "Usage: java migration.Migrate  <commands.script>" );
            return;
        }
        // example input / printing / output
        inputScript = new FileUtility(args[0]);
        
        scanInput();
    }

    /* Reads each line of the input script and passes it to standard input.
     * This occurs sequentially, so we know that each line will only be
     * called when the called message is concluded.
     * 
     * Can be adapted to pass these lines to your helper functions.
     */
    void scanInput() {
        String s = inputScript.nextLine();
        if (s == null) {
            return;
        } else {
            standardOutput <- println(s);
            self <- lineHandler(s) @
            scanInput();
        }
        
    }
}