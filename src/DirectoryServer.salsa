module src;
import java.util.Collections;
import java.util.Hashtable;
import java.util.Iterator;


/*

  A server designed to divide files into blocks.
  It will then distribute the blocks to file servers.
  It can be queried for the locations of blocks of 
  a file it's divided.

  File servers are launched separately and then registered.

  You may adjust function signatures to your needs, 
  and are encouraged to add helper functions.

*/
behavior DirectoryServer {
    
    int blockSize = 64;
    Vector fileServers;
    Hashtable fileLocations;
    Iterator iter;

    DirectoryServer(){
        fileServers = new Vector();
        fileLocations = new Hashtable();
        iter = fileServers.iterator();
    }
    

    void addFileServer(FileServer fs){
        standardOutput <- println("Adding server " + fs.getUAN().toString() + " to Directory");
        fileServers.add(fs.getUAN().toString());
        Collections.sort(fileServers);
        iter = fileServers.iterator();
    }

    /* Take a file and save it to known file servers.
     *
     * To ensure this is deterministic, always save
     * in round robin order. Start each new file 
     * where you left off for previous files.
     *
     * When new file servers are added, sort them
     * alphabetically and reset the round-robin
     * routine. This doesn't load balance perfectly, 
     * but its simple.
     *
     */
    /* You may pass and return any data you need. */
    void store(String fileName, String content) {
        standardOutput <- println("Splitting and storing file: " + fileName);
        int i = 0;
        while(i*64<content.length()){
            String servName = (String) fileServers.get(i%fileServers.size());
            FileServer serv = (FileServer) FileServer.getReferenceByName(new UAN(servName));
            if((i*64)+64 <= content.length()){
                serv <- store(fileName + "_" + String.valueOf(i+1) + ".txt", content.substring(i*64, (i*64)+64));
            }
            else{
                serv <- store(fileName + "_" + String.valueOf(i+1) + ".txt", content.substring(i*64));
            }
            fileLocations.put(fileName + "_" + String.valueOf(i+1) + ".txt",servName); 
            i++;
        }
    }


    /* Given a file name, return the servers and blocks it's located on. */
    /* You may pass and return any data you need. */
    Hashtable retrieve(String fileName) {
        Hashtable temp = new Hashtable();
        Set keys = fileLocations.keySet();
        Set values = fileLocations.values();
        String curKey = "";
        String curValue = "";
        while(keys.hasNext()){
            curKey = keys.next();
            curValue = values.next();
            if(curKey.contains(fileName)){
              temp.put(curKey ,curValue);
            }
        }
        return temp;
    }

}